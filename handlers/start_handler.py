import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from states import Form
from handlers.admin_handler import REGION_BRANCHES
from utils.vacancy_manager import get_vacancies

FIELD_LABELS = {
    "name": {"en": "Name", "uz": "Ism", "ru": "–ò–º—è"},
    "phone": {"en": "Phone", "uz": "Telefon raqam", "ru": "–¢–µ–ª–µ—Ñ–æ–Ω"},
    "region": {"en": "Region", "uz": "Hudud", "ru": "–†–µ–≥–∏–æ–Ω"},
    "branch": {"en": "Branch", "uz": "Filial", "ru": "–§–∏–ª–∏–∞–ª"},
    "vacancy": {"en": "Vacancy", "uz": "Bo‚Äòsh ish o‚Äòrni", "ru": "–í–∞–∫–∞–Ω—Å–∏—è"},
    "bio": {"en": "Bio", "uz": "Biografiya", "ru": "–ë–∏–æ–≥—Ä–∞—Ñ–∏—è"},
    "birth_date": {"en": "Birth Date", "uz": "Tug‚Äòilgan sana", "ru": "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"},
    "live_place": {"en": "Living Place", "uz": "Yashash joyi", "ru": "–ú–µ—Å—Ç–æ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞"},
    "languages": {"en": "Languages", "uz": "Tillar", "ru": "–Ø–∑—ã–∫–∏"},
    "software": {"en": "Software", "uz": "Dasturlar", "ru": "–ü—Ä–æ–≥—Ä–∞–º–º—ã"},
    "family": {"en": "Family", "uz": "Oila", "ru": "–°–µ–º—å—è"},
    "last_work": {"en": "Last Work", "uz": "Oxirgi ish", "ru": "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã"},
    "leave_reason": {"en": "Reason for Leaving", "uz": "Ketish sababi", "ru": "–ü—Ä–∏—á–∏–Ω–∞ —É—Ö–æ–¥–∞"},
    "interest": {"en": "Interest", "uz": "Qiziqish", "ru": "–ò–Ω—Ç–µ—Ä–µ—Å"},
    "source": {"en": "Source", "uz": "Manba", "ru": "–ò—Å—Ç–æ—á–Ω–∏–∫"},
    "personality": {"en": "Personality", "uz": "Shaxsiy fazilatlar", "ru": "–õ–∏—á–Ω–æ—Å—Ç—å"},
    "books": {"en": "Books", "uz": "Kitoblar", "ru": "–ö–Ω–∏–≥–∏"},
    "achievements": {"en": "Achievements", "uz": "Yutuqlar", "ru": "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è"},
    "position": {"en": "Desired Position", "uz": "Istalgan lavozim", "ru": "–ñ–µ–ª–∞–µ–º–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å"},
    "application_preview": {"en": "Application Preview","uz": "Ariza ko‚Äòrinishi","ru": "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç—ã"},
    "application_received": {"en": "New Application Received", "uz": "Yangi ariza qabul qilindi","ru": "–ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞"},
    "time": {"en": "Available Time", "uz": "Ish vaqti", "ru": "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã"}
}


REGIONS = {
    "en": ["Tashkent", "Samarkand", "Bukhara", "Andijan", "Fergana", "Namangan", "Khorezm", "Karakalpakstan", "Jizzakh", "Navoi", "Kashkadarya", "Surkhandarya", "Sirdarya", "Tashkent Region"],
    "uz": ["Toshkent", "Samarqand", "Buxoro", "Andijon", "Farg‚Äòona", "Namangan", "Xorazm", "Qoraqalpog‚Äòiston", "Jizzax", "Navoiy", "Qashqadaryo", "Surxondaryo", "Sirdaryo", "Toshkent viloyati"],
    "ru": ["–¢–∞—à–∫–µ–Ω—Ç", "–°–∞–º–∞—Ä–∫–∞–Ω–¥", "–ë—É—Ö–∞—Ä–∞", "–ê–Ω–¥–∏–∂–∞–Ω", "–§–µ—Ä–≥–∞–Ω–∞", "–ù–∞–º–∞–Ω–≥–∞–Ω", "–•–æ—Ä–µ–∑–º", "–ö–∞—Ä–∞–∫–∞–ª–ø–∞–∫—Å—Ç–∞–Ω", "–î–∂–∏–∑–∞–∫", "–ù–∞–≤–æ–∏", "–ö–∞—à–∫–∞–¥–∞—Ä—å—è", "–°—É—Ä—Ö–∞–Ω–¥–∞—Ä—å—è", "–°—ã—Ä–¥–∞—Ä—å—è", "–¢–∞—à–∫–µ–Ω—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"]
}

REGION_BRANCHES = {
    "Tashkent": [
        {
            "title": {
                "en": "Main Office Tashkent",
                "uz": "Toshkent Bosh Ofisi",
                "ru": "–ì–ª–∞–≤–Ω—ã–π –æ—Ñ–∏—Å –¢–∞—à–∫–µ–Ω—Ç–∞"
            },
            "description": {
                "en": "Head HR Office located in central Tashkent.",
                "uz": "Toshkent markazida joylashgan bosh HR ofisi.",
                "ru": "–ì–ª–∞–≤–Ω—ã–π HR –æ—Ñ–∏—Å –≤ —Ü–µ–Ω—Ç—Ä–µ –¢–∞—à–∫–µ–Ω—Ç–∞."
            },
            "photo_url": "https://repost.uz/storage/uploads/887-1679714908-portal-post-material.jpeg",
            "location": {"latitude": 41.3111, "longitude": 69.2797}
        },
        {
            "title": {
                "en": "Yunusabad Branch",
                "uz": "Yunusobod Filiali",
                "ru": "–§–∏–ª–∏–∞–ª –≤ –Æ–Ω—É—Å–∞–±–∞–¥–µ"
            },
            "description": {
                "en": "Located in Yunusabad district for local HR support.",
                "uz": "Yunusobod tumanida joylashgan mahalliy HR filiali.",
                "ru": "–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω –≤ –Æ–Ω—É—Å–∞–±–∞–¥—Å–∫–æ–º —Ä–∞–π–æ–Ω–µ –¥–ª—è HR-–ø–æ–¥–¥–µ—Ä–∂–∫–∏."
            },
            "photo_url": "https://yunsc.uz/uzb/assets/images/gallery-19-1600x1067.jpg",
            "location": {"latitude": 41.3457, "longitude": 69.2849}
        }
    ],
    "Samarkand": [
        {
            "title": {
                "en": "Samarkand HR Branch",
                "uz": "Samarqand HR Filiali",
                "ru": "–°–∞–º–∞—Ä–∫–∞–Ω–¥—Å–∫–∏–π HR —Ñ–∏–ª–∏–∞–ª"
            },
            "description": {
                "en": "Regional office for HR interviews in Samarkand.",
                "uz": "Samarqanddagi HR suhbatlari uchun mintaqaviy ofis.",
                "ru": "–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ñ–∏—Å –¥–ª—è HR-—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π –≤ –°–∞–º–∞—Ä–∫–∞–Ω–¥–µ."
            },
            "photo_url": "https://ziyoratga.uz/media/regions/samarkandskaya_oblast/gorod_samarkand/imgonline-com-ua-exifeditxP4UkfZXBsdP.jpg",
            "location": {"latitude": 39.6585, "longitude": 66.9603}
        },
        {
            "title": {
                "en": "University Campus Branch",
                "uz": "Universitet Shaharchasi Filiali",
                "ru": "–§–∏–ª–∏–∞–ª –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–æ–º –≥–æ—Ä–æ–¥–∫–µ"
            },
            "description": {
                "en": "HR office located near the university campus.",
                "uz": "Universitet shaharchasi yaqinida joylashgan HR ofisi.",
                "ru": "HR-–æ—Ñ–∏—Å, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã–π —Ä—è–¥–æ–º —Å —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–∏–º –≥–æ—Ä–æ–¥–∫–æ–º."
            },
            "photo_url": "https://example.com/photo4.jpg",
            "location": {"latitude": 39.6200, "longitude": 66.9650}
        }
    ],
    "Bukhara": [
        {
            "title": {
                "en": "Bukhara HR Branch",
                "uz": "Buxoro HR Filiali",
                "ru": "–ë—É—Ö–∞—Ä—Å–∫–∏–π HR —Ñ–∏–ª–∏–∞–ª"
            },
            "description": {
                "en": "Regional office for HR interviews in Bukhara.",
                "uz": "Buxorodagi HR suhbatlari uchun mintaqaviy ofis.",
                "ru": "–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ñ–∏—Å –¥–ª—è HR-—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π –≤ –ë—É—Ö–∞—Ä–µ."
            },
            "photo_url": "https://upload.wikimedia.org/wikipedia/commons/9/99/Sample_User_Icon.png",
            "location": {"latitude": 40.6270, "longitude": 65.9749}
        },
        {
            "title": {
                "en": "University Campus Branch",
                "uz": "Universitet Shaharchasi Filiali",
                "ru": "–§–∏–ª–∏–∞–ª –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–æ–º –≥–æ—Ä–æ–¥–∫–µ"
            },
            "description": {
                "en": "HR office located near the university campus.",
                "uz": "Universitet shaharchasi yaqinida joylashgan HR ofisi.",
                "ru": "HR-–æ—Ñ–∏—Å, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã–π —Ä—è–¥–æ–º —Å —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–∏–º –≥–æ—Ä–æ–¥–∫–æ–º."
            },
            "photo_url": "https://example.com/photo4.jpg",
            "location": {"latitude": 37.6500, "longitude": 65.9643}
        }
    ]
}


LANGUAGES = {
    "en": "English üá¨üáß",
    "uz": "O‚Äòzbek üá∫üáø",
    "ru": "–†—É—Å—Å–∫–∏–π üá∑üá∫"
}

WELCOME_MESSAGES = {
    "en": "Welcome to the HR Application Bot!",
    "uz": "HR botiga xush kelibsiz!",
    "ru": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HR –±–æ—Ç!"
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(text, callback_data=f"lang_{code}")]
        for code, text in LANGUAGES.items()
    ]
    await update.message.reply_text(
        "Please select your language / Iltimos tilni tanlang / –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return Form.LANGUAGE


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå Operation cancelled. To start again, send /start")
    context.user_data.clear()
    return ConversationHandler.END

async def select_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang_code = query.data.split("_")[1]
    context.user_data["lang"] = lang_code
    await query.edit_message_text(WELCOME_MESSAGES[lang_code])

    # Show region selection
    return await show_main_menu(update, context)

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang = context.user_data.get("lang", "en")
    option = query.data.replace("menu_", "")

    if option == "back":
        return await show_main_menu(update, context)

    if option == "vacancies":
        return await show_regions(update, context, next_action="vacancy")

    elif option == "branches":
        return await show_regions(update, context, next_action="branchinfo")

    # Content dictionary
    content = {
        "about": {
            "en": "üßë‚Äçüíº We are a leading HR company in Uzbekistan, committed to connecting talented individuals with top employers. Our mission is to streamline the recruitment process, ensuring the best fit for both candidates and companies. üåü",
            "uz": "üßë‚Äçüíº Biz O‚Äòzbekistondagi yetakchi HR kompaniyamiz, iste‚Äôdodli insonlarni eng yaxshi ish beruvchilar bilan bog‚Äòlashga sodiqmiz. Bizning maqsadimiz ishga qabul qilish jarayonini soddalashtirish, nomzodlar va kompaniyalar uchun eng yaxshi moslikni ta‚Äôminlash. üåü",
            "ru": "üßë‚Äçüíº –ú—ã –≤–µ–¥—É—â–∞—è HR-–∫–æ–º–ø–∞–Ω–∏—è –≤ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–µ, —Å—Ç—Ä–µ–º—è—â–∞—è—Å—è —Å–≤—è–∑–∞—Ç—å —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã—Ö –ª—é–¥–µ–π —Å –≤–µ–¥—É—â–∏–º–∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è–º–∏. –ù–∞—à–∞ –º–∏—Å—Å–∏—è ‚Äî —É–ø—Ä–æ—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–±–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –æ–±–µ—Å–ø–µ—á–∏–≤ –Ω–∞–∏–ª—É—á—à–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏ –∫–æ–º–ø–∞–Ω–∏–π. üåü"
        },
        "branches": {
            "en": "üè¢ We have branches in major cities...",
            "uz": "üè¢ Bizning filiallarimiz yirik shaharlarda joylashgan...",
            "ru": "üè¢ –£ –Ω–∞—Å –µ—Å—Ç—å —Ñ–∏–ª–∏–∞–ª—ã –≤ –∫—Ä—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö..."
        },
        "contacts": {
            "en": "üìû Have questions?\nReach out to us at\nüìß hr@example.com\nüì± +998 90 123 45 67",
            "uz": "üìû Savollar bormi?\nBiz bilan bog‚Äòlaning:\nüìß hr@example.com\nüì± +998 90 123 45 67",
            "ru": "üìû –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã?\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ:\nüìß hr@example.com\nüì± +998 90 123 45 67"
        }

    }
    #"about": "https://havepakken.dk/cdn/shop/products/Untitled.png",
    images = {
        "about": "https://drive.google.com/file/d/1ZL0gkRriiG1ZIl_aQ6_78QauKksshOHa/view?usp=drivesdk",
        "branches": "https://upload.wikimedia.org/wikipedia/commons/b/b6/Image_created_with_a_mobile_phone.png",
        "contacts": "https://gilb.com.np/wp-content/uploads/2024/02/Contact-us.jpg"
    }

    text = content.get(option, {}).get(lang)
    image_url = images.get(option)

    back_button = [[
        InlineKeyboardButton(
            {"en": "üîô Back", "uz": "üîô Orqaga", "ru": "üîô –ù–∞–∑–∞–¥"}[lang], callback_data="menu_back"
        )
    ]]

    if text and image_url:
        await query.message.chat.send_photo(
            photo=image_url,
            caption=text,
            reply_markup=InlineKeyboardMarkup(back_button)
        )
    else:
        await query.edit_message_text(
            text="‚ÑπÔ∏è No information available.",
            reply_markup=InlineKeyboardMarkup(back_button)
        )

    return Form.LANGUAGE




async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "en")

    keyboard = [
        [InlineKeyboardButton({"en": "üè¢ About Company", "uz": "üè¢ Kompaniya haqida", "ru": "üè¢ –û –∫–æ–º–ø–∞–Ω–∏–∏"}[lang],
                              callback_data="menu_about")],
        [InlineKeyboardButton({"en": "üìç Branches", "uz": "üìç Filiallar", "ru": "üìç –§–∏–ª–∏–∞–ª—ã"}[lang],
                              callback_data="menu_branches")],
        [InlineKeyboardButton({"en": "üíº Vacancies", "uz": "üíº Bo‚Äòsh ish o‚Äòrinlari", "ru": "üíº –í–∞–∫–∞–Ω—Å–∏–∏"}[lang],
                              callback_data="menu_vacancies")],
        [InlineKeyboardButton({"en": "‚òéÔ∏è Contacts", "uz": "‚òéÔ∏è Kontaktlar", "ru": "‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã"}[lang],
                              callback_data="menu_contacts")]
    ]

    text = {
        "en": "üè† Main Menu:",
        "uz": "üè† Asosiy menyu:",
        "ru": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
    }[lang]

    try:
        if update.callback_query:
            await update.callback_query.edit_message_text(text=text, reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    except telegram.error.BadRequest as e:
        # fallback to send_message if message was photo/location
        await update.callback_query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

    return Form.LANGUAGE



async def show_regions(update: Update, context: ContextTypes.DEFAULT_TYPE, next_action="vacancy"):
    context.user_data["next_action"] = next_action
    lang = context.user_data.get("lang", "en")
    region_buttons = [[InlineKeyboardButton(region, callback_data=f"region_{region}")] for region in REGIONS[lang]]
    await update.callback_query.edit_message_text(
        text={
            "en": "Please select your region:",
            "uz": "Iltimos, hududingizni tanlang:",
            "ru": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω:"
        }[lang],
        reply_markup=InlineKeyboardMarkup(region_buttons)
    )
    return Form.REGION

async def select_region(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang = context.user_data.get("lang", "en")

    region_name_localized = query.data.replace("region_", "")
    region_key = get_region_key(region_name_localized, lang)  # üîÅ convert to English key
    context.user_data["region"] = region_key  # ‚úÖ use English region key always

    if context.user_data.get("next_action") == "branchinfo":
        return await show_branches_info(update, context)
    else:
        return await show_branches(update, context)


async def select_branch_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang = context.user_data.get("lang", "en")
    branch_index = int(query.data.split("_")[1])
    branch = context.user_data["branches"][branch_index]

    # Show photo and description
    await query.message.chat.send_photo(
        photo=branch["photo_url"],
        caption=f"üìÑ {branch['title'][lang]}\n\n{branch['description'][lang]}"
    )

    # Show location
    await query.message.chat.send_location(
        latitude=branch["location"]["latitude"],
        longitude=branch["location"]["longitude"]
    )

    # Back to region selection
    keyboard = [[InlineKeyboardButton("üîô Back", callback_data="menu_branches")]]
    await query.message.reply_text({
        "en": "üîô Back to branch list",
        "uz": "üîô Filiallar ro‚Äòyxatiga qaytish",
        "ru": "üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ñ–∏–ª–∏–∞–ª–æ–≤"
    }[lang], reply_markup=InlineKeyboardMarkup(keyboard))

    return Form.LANGUAGE


async def show_branches_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "en")
    query = update.callback_query
    await query.answer()

    selected_region = context.user_data.get("region")
    region_key = get_region_key(selected_region, lang)  # ‚úÖ fixed mapping
    branches = REGION_BRANCHES.get(region_key, [])

    if not branches:
        await query.edit_message_text({
            "en": "üö´ No branches found for this region.",
            "uz": "üö´ Bu hudud uchun filiallar topilmadi.",
            "ru": "üö´ –í —ç—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–µ —Ñ–∏–ª–∏–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        }[lang])
        return ConversationHandler.END

    buttons = [
        [InlineKeyboardButton(branch["title"][lang], callback_data=f"branchinfo_{i}")]
        for i, branch in enumerate(branches)
    ]
    buttons.append([InlineKeyboardButton("üîô Back", callback_data="menu_back")])

    await query.edit_message_text(
        text={
            "en": "üè¢ Select a branch to view details:",
            "uz": "üè¢ Filialni tanlang (ma‚Äôlumot uchun):",
            "ru": "üè¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:"
        }[lang],
        reply_markup=InlineKeyboardMarkup(buttons)
    )

    context.user_data["branches"] = branches
    return Form.BRANCH



async def show_branches(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "en")
    query = update.callback_query
    await query.answer()

    selected_region = context.user_data.get("region")
    region_key = get_region_key(selected_region, lang)  # ‚úÖ fix here

    branches = REGION_BRANCHES.get(region_key, [])
    if not branches:
        await query.edit_message_text({
            "en": "üö´ No branches found for this region.",
            "uz": "üö´ Bu hudud uchun filiallar topilmadi.",
            "ru": "üö´ –í —ç—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–µ —Ñ–∏–ª–∏–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        }[lang])
        return ConversationHandler.END

    buttons = [[InlineKeyboardButton(branch["title"][lang], callback_data=f"branch_{i}")]
               for i, branch in enumerate(branches)]
    await query.edit_message_text(
        {
            "en": "Select a branch:",
            "uz": "Filialni tanlang:",
            "ru": "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:"
        }[lang],
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    context.user_data["branches"] = branches
    return Form.BRANCH


def get_region_key(user_region: str, lang: str) -> str:
    """Map localized region name back to English key used in REGION_BRANCHES"""
    for i, region in enumerate(REGIONS[lang]):
        if region == user_region:
            return REGIONS["en"][i]
    return user_region  # fallback


async def select_branch(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang = context.user_data.get("lang", "en")
    branch_index = int(query.data.split("_")[1])
    branch = context.user_data["branches"][branch_index]
    context.user_data["selected_branch"] = branch


    # Send photo
    # await query.message.delete()
    await update.callback_query.message.chat.send_photo(
        photo=branch["photo_url"],
        caption = f"üìÑ {branch['title'][lang]}\n\n{branch['description'][lang]}"
    )

    # Send location
    await update.callback_query.message.chat.send_location(
        latitude=branch["location"]["latitude"],
        longitude=branch["location"]["longitude"]
    )

    # Show apply button
    # Show apply button
    keyboard = [[InlineKeyboardButton({
          "en": "Apply to this branch",
          "uz": "Ushbu filialga ariza berish",
          "ru": "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ —ç—Ç–æ—Ç —Ñ–∏–ª–∏–∞–ª"
      }[lang], callback_data="apply_branch")]]

    await update.callback_query.message.chat.send_message(
        text={
            "en": "Would you like to apply?",
            "uz": "Ariza bermoqchimisiz?",
            "ru": "–•–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É?"
        }[lang],
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return Form.VACANCY


async def show_vacancies(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang = context.user_data.get("lang", "en")
    branch = context.user_data["selected_branch"]
    region = context.user_data["region"]
    branch_title = branch["title"]["en"]
    vacancies = get_vacancies(region, branch_title)

    if not vacancies:
        await query.message.edit_text({
            "en": "üö´ No vacancies available at this branch.",
            "uz": "üö´ Ushbu filialda bo‚Äòsh ish o‚Äòrinlari yo‚Äòq.",
            "ru": "üö´ –í —ç—Ç–æ–º —Ñ–∏–ª–∏–∞–ª–µ –Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π."
        }[lang])
        return ConversationHandler.END

    buttons = [
        [InlineKeyboardButton(vacancy.get(lang, str(vacancy)), callback_data=f"vacancy_{i}")]
        for i, vacancy in enumerate(vacancies)
    ]

    await query.message.edit_text(
        {
            "en": "Please select a vacancy:",
            "uz": "Bo‚Äòsh ish o‚Äòrnini tanlang:",
            "ru": "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é:"
        }[lang],
        reply_markup=InlineKeyboardMarkup(buttons)
    )

    context.user_data["vacancies"] = vacancies
    return Form.VACANCY


async def select_vacancy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang = context.user_data.get("lang", "en")
    vacancy_index = int(query.data.split("_")[1])
    selected_vacancy = context.user_data["vacancies"][vacancy_index]
    context.user_data["selected_vacancy"] = selected_vacancy

    await query.edit_message_text(
        {
            "en": f"‚úÖ You selected: {selected_vacancy['en']}\nLet's begin your application...",
            "uz": f"‚úÖ Siz tanladingiz: {selected_vacancy['uz']}\nKeling, arizangizni to‚Äòldirishni boshlaymiz...",
            "ru": f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {selected_vacancy['ru']}\n–ù–∞—á–Ω–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏..."
        }[lang]
    )

    # Next: Ask for phone number
    return await ask_phone(update, context)



from telegram import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

async def ask_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "en")

    contact_button = KeyboardButton(
        text={
            "en": "üìû Share Phone Number",
            "uz": "üìû Telefon raqamni yuborish",
            "ru": "üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
        }[lang],
        request_contact=True
    )

    reply_markup = ReplyKeyboardMarkup([[contact_button]], resize_keyboard=True, one_time_keyboard=True)

    await update.callback_query.message.reply_text(
        {
            "en": "Please share your phone number:",
            "uz": "Iltimos, telefon raqamingizni yuboring:",
            "ru": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
        }[lang],
        reply_markup=reply_markup
    )
    return Form.PHONE


async def save_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "en")

    contact = update.message.contact
    if not contact:
        await update.message.reply_text(
            {
                "en": "Please use the button to share your phone number.",
                "uz": "Iltimos, raqamni yuborish tugmasidan foydalaning.",
                "ru": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞."
            }[lang]
        )
        return Form.PHONE

    context.user_data["phone"] = contact.phone_number

    await update.message.reply_text(
        {
            "en": "‚úÖ Phone number received. Now write a short biography about yourself:",
            "uz": "‚úÖ Telefon raqamingiz qabul qilindi. Endi o‚Äòzingiz haqingizda qisqacha yozing:",
            "ru": "‚úÖ –ù–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω. –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –æ —Å–µ–±–µ:"
        }[lang],
        reply_markup=ReplyKeyboardRemove()
    )
    return Form.BIO


async def save_bio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "en")
    bio = update.message.text.strip()

    context.user_data["bio"] = bio

    await update.message.reply_text(
        {
            "en": "üìÖ Now enter your birth date (e.g. 02.01.1998):",
            "uz": "üìÖ Tug‚Äòilgan sanangizni kiriting (masalan: 02.01.1998):",
            "ru": "üìÖ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 02.01.1998):"
        }[lang]
    )
    return Form.BIRTH_DATE


import re

async def save_birth_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "en")
    birth_date = update.message.text.strip()

    if not re.match(r"\d{2}.\d{2}.\d{4}", birth_date):
        await update.message.reply_text(
            {
                "en": "‚ùó Invalid format. Please enter as DD.MM.YYYY.",
                "uz": "‚ùó Noto‚Äòg‚Äòri format. Iltimos, DD.MM.YYYY shaklida kiriting.",
                "ru": "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì."
            }[lang]
        )
        return Form.BIRTH_DATE

    context.user_data["birth_date"] = birth_date

    await update.message.reply_text(
        {
            "en": "üè† Where do you currently live?",
            "uz": "üè† Hozir qayerda yashaysiz?",
            "ru": "üè† –ì–¥–µ –≤—ã —Å–µ–π—á–∞—Å –∂–∏–≤–µ—Ç–µ?"
        }[lang]
    )
    return Form.LIVE_PLACE

async def save_live_place(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "en")
    context.user_data["live_place"] = update.message.text.strip()

    await update.message.reply_text({
        "en": "üåê Which languages do you speak?",
        "uz": "üåê Qaysi tillarni bilasiz?",
        "ru": "üåê –ù–∞ –∫–∞–∫–∏—Ö —è–∑—ã–∫–∞—Ö –≤—ã –≥–æ–≤–æ—Ä–∏—Ç–µ?"
    }[lang])
    return Form.LANGUAGES


async def save_languages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "en")
    context.user_data["languages"] = update.message.text.strip()

    await update.message.reply_text({
        "en": "üñ•Ô∏è Which software can you use? (e.g., Excel, Word, 1C)",
        "uz": "üñ•Ô∏è Qaysi dasturlar bilan ishlay olasiz? (masalan: Excel, Word, 1C)",
        "ru": "üñ•Ô∏è –ö–∞–∫–∏–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ –≤—ã –≤–ª–∞–¥–µ–µ—Ç–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: Excel, Word, 1C)"
    }[lang])
    return Form.SOFTWARE


async def save_software(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "en")
    context.user_data["software"] = update.message.text.strip()

    await update.message.reply_text({
        "en": "üë®‚Äçüë©‚Äçüëß Tell us about your family:",
        "uz": "üë®‚Äçüë©‚Äçüëß Oilangiz haqida ma'lumot bering:",
        "ru": "üë®‚Äçüë©‚Äçüëß –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–π —Å–µ–º—å–µ:"
    }[lang])
    return Form.FAMILY


async def save_family(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "en")
    context.user_data["family"] = update.message.text.strip()

    await update.message.reply_text({
        "en": "üè¢ Where did you last work?",
        "uz": "üè¢ Oxirgi ishlagan joyingiz qayerda?",
        "ru": "üè¢ –ì–¥–µ –≤—ã —Ä–∞–±–æ—Ç–∞–ª–∏ —Ä–∞–Ω–µ–µ?"
    }[lang])
    return Form.LAST_WORK


async def save_last_work(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "en")
    context.user_data["last_work"] = update.message.text.strip()

    await update.message.reply_text({
        "en": "‚ùì Why did you leave your last job?",
        "uz": "‚ùì Nima sababdan oxirgi ish joyingizdan ketdingiz?",
        "ru": "‚ùì –ü–æ—á–µ–º—É –≤—ã –ø–æ–∫–∏–Ω—É–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã?"
    }[lang])
    return Form.LEAVE_REASON

async def save_leave_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "en")
    context.user_data["leave_reason"] = update.message.text.strip()

    await update.message.reply_text({
        "en": "üéØ Why are you interested in this vacancy?",
        "uz": "üéØ Nega aynan ushbu bo‚Äòsh ish o‚Äòrni sizni qiziqtirdi?",
        "ru": "üéØ –ü–æ—á–µ–º—É –≤–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞ —ç—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏—è?"
    }[lang])
    return Form.INTEREST


async def save_interest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "en")
    context.user_data["interest"] = update.message.text.strip()

    await update.message.reply_text({
        "en": "üì¢ Where did you hear about this vacancy?",
        "uz": "üì¢ Ushbu bo‚Äòsh ish o‚Äòrni haqida qayerdan bildingiz?",
        "ru": "üì¢ –ì–¥–µ –≤—ã —É–∑–Ω–∞–ª–∏ –æ–± —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏?"
    }[lang])
    return Form.SOURCE


async def save_source(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "en")
    context.user_data["source"] = update.message.text.strip()

    await update.message.reply_text({
        "en": "üë§ Describe your personality and personal traits:",
        "uz": "üë§ Xarakteringiz va shaxsiy fazilatlaringiz haqida yozing:",
        "ru": "üë§ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ –∏ –ª–∏—á–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤–∞—Ö:"
    }[lang])
    return Form.PERSONALITY



async def save_personality(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "en")
    context.user_data["personality"] = update.message.text.strip()

    await update.message.reply_text({
        "en": "üìö What books have you read recently?",
        "uz": "üìö Yaqinda qanday kitoblarni o‚Äòqidingiz?",
        "ru": "üìö –ö–∞–∫–∏–µ –∫–Ω–∏–≥–∏ –≤—ã —á–∏—Ç–∞–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ?"
    }[lang])
    return Form.BOOKS


async def save_books(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "en")
    context.user_data["books"] = update.message.text.strip()

    await update.message.reply_text({
        "en": "üèÖ Please describe your achievements:",
        "uz": "üèÖ Erishgan yutuqlaringiz haqida yozing:",
        "ru": "üèÖ –û–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:"
    }[lang])
    return Form.ACHIEVEMENTS


async def save_achievements(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "en")
    context.user_data["achievements"] = update.message.text.strip()

    await update.message.reply_text({
        "en": "üßë‚Äçüíº Which position are you applying for?",
        "uz": "üßë‚Äçüíº Qaysi lavozimga ariza bermoqchisiz?",
        "ru": "üßë‚Äçüíº –ù–∞ –∫–∞–∫—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤—ã –ø–æ–¥–∞–µ—Ç–µ –∑–∞—è–≤–∫—É?"
    }[lang])
    return Form.POSITION

async def save_position(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "en")
    context.user_data["position"] = update.message.text.strip()

    await update.message.reply_text({
        "en": "‚è∞ What time can you work? (e.g., 09:00‚Äì18:00)",
        "uz": "‚è∞ Qaysi vaqtlarda ishlay olasiz? (masalan: 09:00‚Äì18:00)",
        "ru": "‚è∞ –í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 09:00‚Äì18:00)"
    }[lang])
    return Form.TIME



async def save_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "en")
    context.user_data["time"] = update.message.text.strip()

    await update.message.reply_text({
        "en": "üì∏ Please upload your photo for the application (send as a photo):",
        "uz": "üì∏ Iltimos, ariza uchun surat yuboring (rasm sifatida jo‚Äònating):",
        "ru": "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∫–µ—Ç—ã (–∫–∞–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é):"
    }[lang])
    return Form.PHOTO  # ‚úÖ wait for photo next



from config import GROUP_ID

def t(key, lang):
    return FIELD_LABELS.get(key, {}).get(lang, key)

async def save_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "en")

    if not update.message.photo:
        await update.message.reply_text({
            "en": "‚ùó Please send a valid photo.",
            "uz": "‚ùó Iltimos, haqiqiy rasm yuboring.",
            "ru": "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ."
        }[lang])
        return Form.PHOTO  # Stay in same state

    photo_file_id = update.message.photo[-1].file_id
    context.user_data["photo"] = photo_file_id
    user = update.message.from_user
    context.user_data["name"] = user.full_name

    data = context.user_data

    summary = f"""
*{t('application_preview', lang)}*

üë§ *{t('name', lang)}*: {data.get("name")}
üìû *{t('phone', lang)}*: {data.get("phone")}
üìç *{t('region', lang)}*: {data.get("region")}
üè¢ *{t('branch', lang)}*: {data.get("selected_branch", {}).get("title", {}).get(lang, "")}
üìå *{t('vacancy', lang)}*: {data.get("selected_vacancy", {}).get(lang, "")}
üìñ *{t('bio', lang)}*: {data.get("bio")}
üéÇ *{t('birth_date', lang)}*: {data.get("birth_date")}
üè† *{t('live_place', lang)}*: {data.get("live_place")}
üåê *{t('languages', lang)}*: {data.get("languages")}
üñ• *{t('software', lang)}*: {data.get("software")}
üë®‚Äçüë©‚Äçüëß *{t('family', lang)}*: {data.get("family")}
üè¢ *{t('last_work', lang)}*: {data.get("last_work")}
‚ùå *{t('leave_reason', lang)}*: {data.get("leave_reason")}
üéØ *{t('interest', lang)}*: {data.get("interest")}
üì¢ *{t('source', lang)}*: {data.get("source")}
üë§ *{t('personality', lang)}*: {data.get("personality")}
üìö *{t('books', lang)}*: {data.get("books")}
üèÖ *{t('achievements', lang)}*: {data.get("achievements")}
üíº *{t('position', lang)}*: {data.get("position")}
‚è∞ *{t('time', lang)}*: {data.get("time")}
""".strip()

    keyboard = [
        [
            InlineKeyboardButton({"en": "‚úÖ Submit", "uz": "‚úÖ Yuborish", "ru": "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å"}[lang], callback_data="confirm_submit"),
            InlineKeyboardButton({"en": "‚ùå Cancel", "uz": "‚ùå Bekor qilish", "ru": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"}[lang], callback_data="confirm_cancel")
        ]
    ]

    await update.message.reply_photo(
        photo=photo_file_id,
        caption=summary,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return Form.CONFIRM


async def confirm_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang = context.user_data.get("lang", "en")
    user = query.from_user
    data = context.user_data

    if query.data == "confirm_submit":
        msg = f"""
*{t('application_received', lang)}*

üë§ *{t("name", lang)}*: {user.full_name}
üìû *{t("phone", lang)}*: {data.get('phone')}
üìç *{t("region", lang)}*: {data.get('region')}
üè¢ *{t("branch", lang)}*: {data.get('selected_branch', {}).get('title', {}).get(lang, '')}
üìå *{t("vacancy", lang)}*: {data.get('selected_vacancy', {}).get(lang, '')}
üìñ *{t("bio", lang)}*: {data.get('bio')}
üéÇ *{t("birth_date", lang)}*: {data.get('birth_date')}
üè† *{t("live_place", lang)}*: {data.get('live_place')}
üåê *{t("languages", lang)}*: {data.get('languages')}
üñ• *{t("software", lang)}*: {data.get('software')}
üë®‚Äçüë©‚Äçüëß *{t("family", lang)}*: {data.get('family')}
üè¢ *{t("last_work", lang)}*: {data.get('last_work')}
‚ùå *{t("leave_reason", lang)}*: {data.get('leave_reason')}
üéØ *{t("interest", lang)}*: {data.get('interest')}
üì¢ *{t("source", lang)}*: {data.get('source')}
üë§ *{t("personality", lang)}*: {data.get('personality')}
üìö *{t("books", lang)}*: {data.get('books')}
üèÖ *{t("achievements", lang)}*: {data.get('achievements')}
üíº *{t("position", lang)}*: {data.get('position')}
‚è∞ *{t("time", lang)}*: {data.get('time')}
""".strip()

        await context.bot.send_photo(
            chat_id=GROUP_ID,
            photo=data.get("photo"),
            caption=msg,
            parse_mode="Markdown"
        )

        await query.edit_message_caption({
            "en": "‚úÖ Your application has been submitted. Thank you!",
            "uz": "‚úÖ Arizangiz yuborildi. Rahmat!",
            "ru": "‚úÖ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!"
        }[lang])

    else:
        await query.edit_message_caption({
            "en": "‚ùå Application cancelled.",
            "uz": "‚ùå Ariza bekor qilindi.",
            "ru": "‚ùå –ê–Ω–∫–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."
        }[lang])

    context.user_data.clear()
    return ConversationHandler.END

